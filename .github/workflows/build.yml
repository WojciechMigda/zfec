# Build sdist+wheel packages using GitHub Actions.  Mostly adopted
# from https://cibuildwheel.readthedocs.io/en/stable/setup/

# Supported architectures: https://cibuildwheel.readthedocs.io/en/stable/options/

# NOTE:
# Some cibuildwheel matrix tasks are split, because running 3 separate workers
# each with two wheels takes for them less time than with 1 worker doing all 3 wheels.
# Linux task is fast enough to do the whole selection using just a single worker.

name: "Packages"

on:
  push:
    branches:
      # Do build on pushes to main.
      - "main"

    tags:
      # Do build on pushes to any release tag See
      # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
      # for documentation about how patterns are matched.
      - "zfex-*"

  # Do build on pushes to any branch with an open pull request.
  pull_request:

  # Do build on different release events
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#release
  release:
    types: [published, created, edited]

env:
  # Just make sure that Python can use zfex package
  CIBW_TEST_COMMAND: python -c "import zfex; print(zfex.__version__)"

jobs:

  generate_enum_pxi:
    name: "Generate enum PXIs"
    uses: ./.github/workflows/gen-py-artifacts.yml

  commit_enum_pxis:
    name: "Commit code artifacts"
    needs:
      - "upload_pypi"
    runs-on: "ubuntu-latest"
    outputs:
      dirty_repo: false
    steps:
      - name: "Check out zfex sources"
        uses: actions/checkout@v4
        with:
          # This is required for EndBug/add-and-commit
          ref: ${{ github.event.pull_request.head.ref }}

      - uses: "actions/download-artifact@v3"
        name: "Download generated code artifacts"
        with:
          name: "py-enum-pxis"
          path: "zfex" # zfex folder under setup.py

      - name: "Check if there are changes to be commited"
        id: check
        run: |
          if [[ $(git diff --stat zfex/_zfex_status.pxi) != '' ]] \
          || [[ $(git status --untracked --short zfex/_zfex_status.pxi) != '' ]]; then
            echo "::set-output name=dirty_repo::true"
            echo "YES"
          fi

      - name: "Commit changes"
        if: ${{ steps.check.outputs.dirty_repo == 'true' }}
        uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
          message: ':robot: Add generated code artifacts'
          add: 'zfex/_zfex_status.pxi'

  build_wheels:
    needs:
      - "generate_enum_pxi"
    name: "${{ matrix.cibw.wheel-selector }} wheel on ${{ matrix.os }} | ${{ matrix.cibw.arch }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: "ubuntu-latest"
            cibw:
              wheel-selector: "cp36-* cp37-* cp38-* cp39-* cp310-* cp311-* pp37-* pp38-*"
              arch: auto64

          - os: "windows-latest"
            architecture: x64
            cibw:
              wheel-selector: "cp37-* cp38-*"

          - os: "windows-latest"
            architecture: x64
            cibw:
              wheel-selector: "cp39-* cp310-* cp311-*"

          - os: "windows-latest"
            architecture: x64
            cibw:
              wheel-selector: "pp37-* pp38-*"

          - os: "macos-11"
            cibw:
              wheel-selector: "cp37-* cp38-*"
              arch: "x86_64 arm64"

          - os: "macos-11"
            cibw:
              wheel-selector: "cp39-* cp310-* cp311-*"
              arch: "x86_64 arm64"

          - os: "macos-11"
            cibw:
              wheel-selector: "pp37-* pp38-*"
              arch: "x86_64 arm64"

          - os: "ubuntu-latest"
            cibw:
              wheel-selector: "cp36* cp37*"
              skip: "*musllinux*"
              manylinux_image: manylinux2010
              arch: auto64

          - os: "ubuntu-latest"
            cibw:
              wheel-selector: "cp37* cp38*"
              skip: "*musllinux*"
              manylinux_image: manylinux2014
              arch: aarch64

          - os: "ubuntu-latest"
            cibw:
              wheel-selector: "cp39* cp310* cp311*"
              skip: "*musllinux*"
              manylinux_image: manylinux2014
              arch: aarch64

    steps:
      - name: Check out zfex sources
        uses: actions/checkout@v4
        with:
          # Check out the full history, including tags.  This is necessary to
          # construct non-release version numbers.
          fetch-depth: 0

      - uses: "actions/download-artifact@v3"
        name: "Download generated code artifacts"
        with:
          name: "py-enum-pxis"
          path: "zfex" # zfex folder under setup.py

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.7'

      - name: register qemu
        if: contains(matrix.cibw.arch, 'aarch64')
        run: |
          docker run --rm --privileged hypriot/qemu-register:v4.2.0

      - name: Install cibuildwheel
        run: |
          python3 -m pip install cibuildwheel
          python -m cibuildwheel --print-build-identifiers

      - name: "Run cibuildwheel"
        env:
          # Configure cibuildwheel to build just some of the total wheels we
          # could build for this architecture.  This yields better parallelism
          # on GitHub Actions execution.
          MACOSX_DEPLOYMENT_TARGET: "10.9"
          CIBW_BUILD: "${{ matrix.cibw.wheel-selector }}"
          CIBW_SKIP: "${{ matrix.cibw.skip || '' }}"
          CIBW_MANYLINUX_X86_64_IMAGE: "${{ matrix.cibw.manylinux_image }}"
          CIBW_MANYLINUX_I686_IMAGE: "${{ matrix.cibw.manylinux_image }}"
          CIBW_MANYLINUX_AARCH64_IMAGE: "${{ matrix.cibw.manylinux_image }}"
          CIBW_ARCHS_LINUX: "${{ matrix.cibw.arch || 'auto' }}"
          CIBW_ARCHS_MACOS: "${{ matrix.cibw.arch || 'auto' }}"

        run: |
          python3 -m cibuildwheel --output-dir wheelhouse

      - uses: actions/upload-artifact@v3
        name: Upload artifacts
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    needs:
      - "generate_enum_pxi"
    name: Build source distribution
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        name: Check out zfex sources
        with:
          # Check out the full history, including tags.  This is necessary to
          # construct non-release version numbers.
          fetch-depth: 0

      - uses: "actions/download-artifact@v3"
        name: "Download generated code artifacts"
        with:
          name: "py-enum-pxis"
          path: "zfex" # zfex folder under setup.py

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.7'

      - name: Build sdist
        run: |
          python3 setup.py sdist

      - uses: actions/upload-artifact@v3
        name: Upload artifacts
        with:
          path: dist/*.tar.gz

  upload_pypi:
    name: "Upload to PyPi"
    needs:
      - "build_wheels"
      - "build_sdist"

    # It only needs to run once.  It will fetch all of the other build
    # artifacts created by the other jobs and then upload them.
    runs-on: "ubuntu-latest"

    # Select the GitHub Actions environment that contains the PyPI tokens
    # necessary to perform uploads.  This was configured manually using the
    # GitHub web interface.
    environment: "release"

    steps:
      # Download all artifacts previously built by this workflow to the dist
      # directory where the publish step can find them.  These are the sdist
      # and all of the wheels build by the other jobs.
      - uses: "actions/download-artifact@v3"
        with:
          name: "artifact"
          path: "dist"

      # Define a conditional step to upload packages to the testing instance
      # of PyPI.
      #
      # The overall workflow is already restricted so that it runs for:
      # 1) pushes to master
      # 2) pushes to release tags
      # 3) pushes to branches with associated PRs
      #
      # The conditional in this step should cause it to run only for case (3).
      - name: "Publish to TEST PyPI"
        uses: "pypa/gh-action-pypi-publish@release/v1"
        if: >-
          github.event_name == 'pull_request'

        with:
          # Authenticate using a token from a PyPI account with upload
          # permission to the project.  See https://pypi.org/help/#apitoken
          user: "__token__"
          # Read it from a GitHub Actions "environment" secret.  See
          # https://docs.github.com/en/actions/security-guides/encrypted-secrets
          password: "${{ secrets.testpypi_token }}"
          # Override the default in order to upload it to the testing
          # deployment.
          repository_url: "https://test.pypi.org/legacy/"
          # Resolve 'File already exists' TestPyPi uploading error
          skip_existing: true

      # Now define a conditional step to upload packages to the production
      # instance of PyPI.
      #
      # The cases to consider are the same as for the upload to the testing
      # instance.  This time, we have a conditional that runs only for case
      # (2).
      - name: "Publish to LIVE PyPI"
        uses: "pypa/gh-action-pypi-publish@release/v1"
        if: >-
          github.event_name == 'push' &&
          startsWith(github.event.ref, 'refs/tags/zfex-')

        with:
          user: "__token__"
          password: "${{ secrets.pypi_token }}"
