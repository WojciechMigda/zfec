name: "Tests | Arm+qemu"

on:
  push:
    branches:
      - 'main'
  pull_request:

jobs:

  generate_enum_pxi:
    uses: ./.github/workflows/gen-py-artifacts.yml

  Python-API-tests:
    needs:
      - "generate_enum_pxi"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - name: "Check out zfex sources"
        uses: actions/checkout@v4

      - uses: "actions/download-artifact@v3"
        name: "Download generated code artifacts"
        with:
          name: "py-enum-pxis"
          path: "zfex" # zfex folder under setup.py

      - name: "Run unit tests on QEMU (cortex-a8)"
        uses: pguyot/arm-runner-action@v2
        with:
          base_image: raspios_lite:latest
          cpu: cortex-a8
          optimize_image: no
          commands: |
            sudo apt-get --yes update
            sudo apt-get --yes install python3-pip
            yes | pip install twisted pyutil
            yes | pip install --verbose .[test]
            trial zfex

      - name: "Run unit tests on QEMU (cortex-a8), built with ZFEX_USE_ARM_NEON"
        uses: pguyot/arm-runner-action@v2
        with:
          base_image: raspios_lite:latest
          cpu: cortex-a8
          optimize_image: no
          commands: |
            sudo apt-get --yes update
            sudo apt-get --yes install python3-pip
            yes | pip install twisted pyutil
            export CFLAGS="-DZFEX_USE_ARM_NEON -mcpu=cortex-a8 -mfpu=neon -O3" && yes | pip install --verbose .[test]
            trial zfex

  benchmark-tool-tests-LE:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false

    steps:
    - name: "Check out zfex sources"
      uses: actions/checkout@v4

    - name: "Update apt"
      run: sudo apt-get update -y

    - name: "Install qemu-arm"
      run: sudo apt-get install -y qemu-system-arm qemu-user-static

    - name: "Install gcc cross-compiler"
      run: sudo apt-get install -y gcc-8-arm-linux-gnueabihf

    - name: "Build and run benchmark tool tests on QEMU (cortex-a8)"
      run: |
        export CC=arm-linux-gnueabihf-gcc-8
        ${CC} --version
        ####################################################################
        # Strategy of these tests is to compare checksums extracted from
        # benchmark tool runs outputs obtained from the non-SIMD legacy
        # algorithm binary and the SIMD-enabled algorithm binary, aligned
        # and unaligned memory.
        ####################################################################
        # Step 1. Build legacy algorithm binary and check that it runs.
        ####################################################################
        echo "::group::Build legacy algo benchmark and check that it runs"
        export CFLAGS="-O3 -static" && make -C bench bench_zfex
        mv bench/bench_zfex bench/bench_zfec
        bench/bench_zfec -h && bench/bench_zfec -i 1 -r 1
        echo "::endgroup::"
        ####################################################################
        # Step 2a. Build SIMD-enabled binary and check that it runs.
        #          ZFEX_UNROLL_ADDMUL_SIMD = 1
        ####################################################################
        echo "::group::Build SIMD-enabled benchmark and check that it runs. ZFEX_UNROLL_ADDMUL_SIMD = 1"
        export CFLAGS="-DZFEX_USE_ARM_NEON -DZFEX_UNROLL_ADDMUL_SIMD=1 -mcpu=cortex-a8 -mfpu=neon -O3 -static" && make -C bench bench_zfex
        make -C bench bench_zfex
        bench/bench_zfex -h && bench/bench_zfex -i 1 -r 1
        echo "::endgroup::"
        ####################################################################
        # Step 3a. Run both binaries with the same inputs and compare
        #          reported checksums.
        # Input data is designed to have FEC blocks sizes incrementally
        # grow in a range. The range starts and ends at two consecutive
        # alignment boundaries, respectively.
        # We control FEC block sizes by changing input data size.
        # For k and m parameters equal 223 and 255, FEC block size of 192
        # means that input data size needs to equal 192 * 223 = 42816.
        # The next alignment boundary will be 192 + 16 = 208, which implies
        # input data size of 208 * 223 = 46384. We will be increasing
        # input data size in steps of 223.
        ####################################################################
        echo "::group::Run tests"
        # unaligned
        bash -c 'for size in `seq 42816 223 46384`; do diff <( bench/bench_zfec -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x | grep xsum ) <( bench/bench_zfex -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x | grep xsum ) || exit 1 ; done'
        # aligned
        bash -c 'for size in `seq 42816 223 46384`; do diff <( bench/bench_zfec -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x | grep xsum ) <( bench/bench_zfex -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x -A | grep xsum ) || exit 1 ; done'
        echo "OK"
        echo "::endgroup::"

        ####################################################################
        # Step 2b. Build SIMD-enabled binary and check that it runs.
        #          ZFEX_UNROLL_ADDMUL_SIMD = 2
        ####################################################################
        echo "::group::Build SIMD-enabled benchmark and check that it runs. ZFEX_UNROLL_ADDMUL_SIMD = 2"
        export CFLAGS="-DZFEX_USE_ARM_NEON -DZFEX_UNROLL_ADDMUL_SIMD=2 -mcpu=cortex-a8 -mfpu=neon -O3 -static" && make -C bench bench_zfex
        make -C bench clean || true
        make -C bench bench_zfex
        bench/bench_zfex -h && bench/bench_zfex -i 1 -r 1
        echo "::endgroup::"
        ####################################################################
        # Step 3b. Run both binaries with the same inputs and compare
        #          reported checksums.
        ####################################################################
        echo "::group::Run tests"
        # unaligned
        bash -c 'for size in `seq 42816 223 46384`; do diff <( bench/bench_zfec -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x | grep xsum ) <( bench/bench_zfex -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x | grep xsum ) || exit 1 ; done'
        # aligned
        bash -c 'for size in `seq 42816 223 46384`; do diff <( bench/bench_zfec -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x | grep xsum ) <( bench/bench_zfex -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x -A | grep xsum ) || exit 1 ; done'
        echo "OK"
        echo "::endgroup::"

        ####################################################################
        # Step 2c. Build SIMD-enabled binary and check that it runs.
        #          ZFEX_UNROLL_ADDMUL_SIMD = 3
        ####################################################################
        echo "::group::Build SIMD-enabled benchmark and check that it runs. ZFEX_UNROLL_ADDMUL_SIMD = 3"
        export CFLAGS="-DZFEX_USE_ARM_NEON -DZFEX_UNROLL_ADDMUL_SIMD=3 -mcpu=cortex-a8 -mfpu=neon -O3 -static" && make -C bench bench_zfex
        make -C bench clean || true
        make -C bench bench_zfex
        bench/bench_zfex -h && bench/bench_zfex -i 1 -r 1
        echo "::endgroup::"
        ####################################################################
        # Step 3c. Run both binaries with the same inputs and compare
        #          reported checksums.
        ####################################################################
        echo "::group::Run tests"
        # unaligned
        bash -c 'for size in `seq 42816 223 46384`; do diff <( bench/bench_zfec -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x | grep xsum ) <( bench/bench_zfex -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x | grep xsum ) || exit 1 ; done'
        # aligned
        bash -c 'for size in `seq 42816 223 46384`; do diff <( bench/bench_zfec -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x | grep xsum ) <( bench/bench_zfex -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x -A | grep xsum ) || exit 1 ; done'
        echo "OK"
        echo "::endgroup::"

  benchmark-tool-tests-BE:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false

    steps:
    - name: "Check out zfex sources"
      uses: actions/checkout@v4

    - name: "Update apt"
      run: sudo apt-get update -y

    - name: "Install qemu-arm"
      run: sudo apt-get install -y qemu-system-arm qemu-user-static

    - name: "Install gcc cross-compiler"
      run: |
        wget --progress=dot:mega https://releases.linaro.org/components/toolchain/binaries/latest-5/armeb-linux-gnueabihf/gcc-linaro-5.5.0-2017.10-x86_64_armeb-linux-gnueabihf.tar.xz
        tar -xf gcc-linaro-5.5.0-2017.10-x86_64_armeb-linux-gnueabihf.tar.xz
        mv gcc-linaro-5.5.0-2017.10-x86_64_armeb-linux-gnueabihf linaro

    - name: "Build and run benchmark tool tests on QEMU (cortex-a8)"
      run: |
        export CC=$(pwd)/linaro/bin/armeb-linux-gnueabihf-gcc
        ${CC} --version
        ####################################################################
        # Strategy of these tests is to compare checksums extracted from
        # benchmark tool runs outputs obtained from the non-SIMD legacy
        # algorithm binary and the SIMD-enabled memory algorithm
        # binary, aligned and unaligned.
        ####################################################################
        # Step 1. Build legacy algorithm binary and check that it runs.
        ####################################################################
        echo "::group::Build legacy algo benchmark and check that it runs"
        export CFLAGS="-O3 -static" && make -C bench bench_zfex
        mv bench/bench_zfex bench/bench_zfec
        qemu-armeb-static bench/bench_zfec -h && qemu-armeb-static bench/bench_zfec -i 1 -r 1
        echo "::endgroup::"
        ####################################################################
        # Step 2a. Build SIMD-enabled binary and check that it runs.
        #          ZFEX_UNROLL_ADDMUL_SIMD = 1
        ####################################################################
        echo "::group::Build SIMD-enabled benchmark and check that it runs. ZFEX_UNROLL_ADDMUL_SIMD = 1"
        export CFLAGS="-DZFEX_USE_ARM_NEON -DZFEX_UNROLL_ADDMUL_SIMD=1 -mcpu=cortex-a8 -mfpu=neon -O3 -static" && make -C bench bench_zfex
        make -C bench bench_zfex
        qemu-armeb-static bench/bench_zfex -h && qemu-armeb-static bench/bench_zfex -i 1 -r 1
        echo "::endgroup::"
        ####################################################################
        # Step 3a. Run both binaries with the same inputs and compare
        #          reported checksums.
        # Input data is designed to have FEC blocks sizes incrementally
        # grow in a range. The range starts and ends at two consecutive
        # alignment boundaries, respectively.
        # We control FEC block sizes by changing input data size.
        # For k and m parameters equal 223 and 255, FEC block size of 192
        # means that input data size needs to equal 192 * 223 = 42816.
        # The next alignment boundary will be 192 + 16 = 208, which implies
        # input data size of 208 * 223 = 46384. We will be increasing
        # input data size in steps of 223.
        ####################################################################
        echo "::group::Run tests"
        # unaligned
        bash -c 'for size in `seq 42816 223 46384`; do diff <( qemu-armeb-static bench/bench_zfec -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x | grep xsum ) <( qemu-armeb-static bench/bench_zfex -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x | grep xsum ) || exit 1 ; done'
        # aligned
        bash -c 'for size in `seq 42816 223 46384`; do diff <( qemu-armeb-static bench/bench_zfec -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x | grep xsum ) <( qemu-armeb-static bench/bench_zfex -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x -A | grep xsum ) || exit 1 ; done'
        echo "OK"
        echo "::endgroup::"

        ####################################################################
        # Step 2b. Build SIMD-enabled binary and check that it runs.
        #          ZFEX_UNROLL_ADDMUL_SIMD = 2
        ####################################################################
        echo "::group::Build SIMD-enabled benchmark and check that it runs. ZFEX_UNROLL_ADDMUL_SIMD = 2"
        export CFLAGS="-DZFEX_USE_ARM_NEON -DZFEX_UNROLL_ADDMUL_SIMD=2 -mcpu=cortex-a8 -mfpu=neon -O3 -static" && make -C bench bench_zfex
        make -C bench clean || true
        make -C bench bench_zfex
        qemu-armeb-static bench/bench_zfex -h && qemu-armeb-static bench/bench_zfex -i 1 -r 1
        echo "::endgroup::"
        ####################################################################
        # Step 3b. Run both binaries with the same inputs and compare
        #          reported checksums.
        ####################################################################
        echo "::group::Run tests"
        # unaligned
        bash -c 'for size in `seq 42816 223 46384`; do diff <( qemu-armeb-static bench/bench_zfec -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x | grep xsum ) <( qemu-armeb-static bench/bench_zfex -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x | grep xsum ) || exit 1 ; done'
        # aligned
        bash -c 'for size in `seq 42816 223 46384`; do diff <( qemu-armeb-static bench/bench_zfec -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x | grep xsum ) <( qemu-armeb-static bench/bench_zfex -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x -A | grep xsum ) || exit 1 ; done'
        echo "OK"
        echo "::endgroup::"

        ####################################################################
        # Step 2c. Build SIMD-enabled binary and check that it runs.
        #          ZFEX_UNROLL_ADDMUL_SIMD = 3
        ####################################################################
        echo "::group::Build SIMD-enabled benchmark and check that it runs. ZFEX_UNROLL_ADDMUL_SIMD = 3"
        export CFLAGS="-DZFEX_USE_ARM_NEON -DZFEX_UNROLL_ADDMUL_SIMD=3 -mcpu=cortex-a8 -mfpu=neon -O3 -static" && make -C bench bench_zfex
        make -C bench clean || true
        make -C bench bench_zfex
        qemu-armeb-static bench/bench_zfex -h && qemu-armeb-static bench/bench_zfex -i 1 -r 1
        echo "::endgroup::"
        ####################################################################
        # Step 3c. Run both binaries with the same inputs and compare
        #          reported checksums.
        ####################################################################
        echo "::group::Run tests"
        # unaligned
        bash -c 'for size in `seq 42816 223 46384`; do diff <( qemu-armeb-static bench/bench_zfec -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x | grep xsum ) <( qemu-armeb-static bench/bench_zfex -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x | grep xsum ) || exit 1 ; done'
        # aligned
        bash -c 'for size in `seq 42816 223 46384`; do diff <( qemu-armeb-static bench/bench_zfec -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x | grep xsum ) <( qemu-armeb-static bench/bench_zfex -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x -A | grep xsum ) || exit 1 ; done'
        echo "OK"
        echo "::endgroup::"
