name: "Tests | Intel"

on:
  push:
    branches:
      - "main"
  pull_request:

jobs:

  Python-API-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-11
          - ubuntu-latest
          - windows-latest
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
          - "pypy-3.7"
          - "pypy-3.8"
        include:
          - os: "ubuntu-latest"
            python-version: "3.6"
    steps:
      - name: "Check out zfex sources"
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Run python API unit tests"
        run: |
          pip install .[test]
          trial zfex

  benchmark-tool-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-11
          - ubuntu-latest
          - windows-latest

    steps:
      - name: "Check out zfex sources"
        uses: actions/checkout@v3

      - name: "Set windows-latest environment"
        shell: bash
        if: runner.os == 'Windows'
        run: |
          echo "CC=gcc" >> $GITHUB_ENV
          echo "EXE=.exe" >> $GITHUB_ENV

      - name: "Set matrix.os environment"
        shell: bash
        run: |
          echo "ZFEC_EXE=bench/bench_zfec${EXE}" >> $GITHUB_ENV
          echo "ZFEX_EXE=bench/bench_zfex${EXE}" >> $GITHUB_ENV

      - name: "Build and run benchmark tool tests"
        shell: bash
        run: |
            gcc --version
            ####################################################################
            # Strategy of these tests is to compare checksums extracted from
            # benchmark tool runs outputs obtained from the non-SIMD legacy
            # algorithm binary and the SIMD-enabled aligned memory algorithm
            # binary.
            ####################################################################
            # Step 1. Build legacy algorithm binary and check that it runs.
            ####################################################################
            echo "::group::Build legacy algo benchmark and check that it runs"
            make -C bench bench_zfex
            mv ${ZFEX_EXE} ${ZFEC_EXE}
            ${ZFEC_EXE} -h && ${ZFEC_EXE} -i 1 -r 1
            echo "::endgroup::"
            ####################################################################
            # Step 2. Build SIMD-enabled binary and check that it runs.
            ####################################################################
            echo "::group::Build SIMD-enabled benchmark and check that it runs"
            export CFLAGS="-DZFEX_USE_INTEL_SSSE3 -mssse3 -O3" && make -C bench bench_zfex
            make -C bench bench_zfex
            ${ZFEX_EXE} -h && ${ZFEX_EXE} -i 1 -r 1
            echo "::endgroup::"
            ####################################################################
            # Step 3. Run both binaries with the same inputs and compare
            #         reported checksums.
            # Input data is designed to have FEC blocks sizes incrementally
            # grow in a range. The range starts and ends at two consecutive
            # alignment boundaries, respectively.
            # We control FEC block sizes by changing input data size.
            # For k and m parameters equal 223 and 255, FEC block size of 192
            # means that input data size needs to equal 192 * 223 = 42816.
            # The next alignment boundary will be 192 + 16 = 208, which implies
            # input data size of 208 * 223 = 46384. We will be increasing
            # input data size in steps of 223.
            ####################################################################
            echo "::group::Run tests"
            bash -c 'for size in `seq 42816 223 46384`; do diff <( ${ZFEC_EXE} -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x | grep xsum ) <( ${ZFEX_EXE} -k 223 -m 255 -s ${size} -i 1 -r 1 -p "Zażółć gęślą jaźń" -x -A | grep xsum ) ; done'
            echo "OK"
            echo "::endgroup::"
