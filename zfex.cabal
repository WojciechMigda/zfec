Cabal-Version:   2.2
name:            zfex
version:         0.1.1
license:         GPL-2.0-or-later
license-file:    README.rst
author:          Adam Langley <agl@imperialviolet.org>
maintainer:      Adam Langley <agl@imperialviolet.org>, Wojciech Migda
description:     This code, based on zfex by Migda, based on zfec by Zooko,
                 based on code by Luigi Rizzo implements an erasure code, or forward error
                 correction code. The most widely known example of an erasure
                 code is the RAID-5 algorithm which makes it so that in the
                 event of the loss of any one hard drive, the stored data can
                 be completely recovered.  The algorithm in the zfec package
                 has a similar effect, but instead of recovering from the loss
                 of only a single element, it can be parameterized to choose in
                 advance the number of elements whose loss it can tolerate.
homepage:        https://github.com/WojciechMigda/zfex
synopsis:        Forward error correction of ByteStrings
category:        Codec
stability:       provisional
tested-with:     GHC == 6.8.2
                 , GHC == 6.8.5
                 , GHC == 9.2.2
extra-source-files:
                 zfex/zfex.h,
                 zfex/zfex_pp.h, zfex/zfex_macros.h, zfex/zfex_bytemask.h, zfex/zfex_status.h,
                 haskell/Codec/ZFEXStatus.chs,
                 COPYING.GPL, COPYING.TGPPL.rst

flag speed
    description: Enable highest level optimizations for speed
    default: False
    manual: True

flag ssse3
    description: Enable SSSE3 SIMD optimizations
    default: False
    manual: True

flag neon
    description: Enable NEON SIMD optimizations
    default: False
    manual: True

Library
    build-type:      Simple
    hs-source-dirs:  haskell
    build-depends:   base, bytestring>=0.9
    exposed-modules: Codec.ZFEX
    other-modules:   Codec.ZFEXStatus
    ghc-options:     -Wall -v
    c-sources:       zfex/zfex.c
    x-extra-c2hs-options: --cppopts=-Izfex
    include-dirs:    zfex
    default-extensions:
                     ForeignFunctionInterface

    -- GHC's Windows toolchain is based on clang/libc++ in GHC 9.4 and later
    if (!os(windows)) || (os(windows) && impl(ghc >= 9.4))
      cc-options:    -std=c99

    if flag(ssse3)
      if arch(x86_64) && (os(linux) || os(darwin) || (os(windows) && impl(ghc >= 9.4)))
        cc-options: -mssse3 -DZFEX_USE_INTEL_SSSE3
      elif arch(x86_64) && os(windows)
        cc-options: /arch:SSE2 /DZFEX_USE_INTEL_SSSE3

    if flag(neon)
      if arch(arm) && (os(linux) || os(darwin) || (os(windows) && impl(ghc >= 9.4)))
        cc-options: -DZFEX_USE_ARM_NEON -mfpu=neon
      elif arch(arm) && os(windows)
        cc-options: /DZFEX_USE_ARM_NEON

    if flag(speed)
      if os(linux) || os(darwin) || (os(windows) && impl(ghc >= 9.4))
        cc-options: -O3
      elif os(windows)
        cc-options: /O2

Test-Suite quickcheck-tests
    type:       exitcode-stdio-1.0
    hs-source-dirs:
                haskell/test
    main-is:    ZFEXTest.hs
    build-depends:
                base
                , bytestring>=0.9
                , QuickCheck
                , random
                , zfex

source-repository head
  type:     git
  location: https://github.com/WojciechMigda/zfex.git
